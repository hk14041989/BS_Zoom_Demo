@using BS_Zoom_Demo.Web.Models.Meetings
@model UserJoinMeetingModel
@{
    Layout = null;
}

<div class="modal-body">
    <input type="hidden" name="userJoinMeetingId" id="userJoinMeetingId" value="@Model.userJoinMeetingId">
    <input type="hidden" name="meetingid" id="meetingid" value="@Model.meetingId">
</div>
<script>
    const simd = async () => WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 253, 15, 26, 11]))
    simd().then((res) => {
        console.log("simd check", res);
    });

    (function () {
        var testTool = window.testTool;
        // get meeting args from url
        var tmpArgs = testTool.parseQueryTemp($('#tmpArgs').val());
        var meetingConfig = {};
        meetingConfig = {
            apiKey: tmpArgs.apiKey,
            meetingNumber: tmpArgs.mn,
            userName: (function () {
                if (tmpArgs.name) {
                    try {
                        return testTool.b64DecodeUnicode(tmpArgs.name);
                    } catch (e) {
                        return tmpArgs.name;
                    }
                }
                return (
                    "CDN#" +
                    tmpArgs.version +
                    "#" +
                    testTool.detectOS() +
                    "#" +
                    testTool.getBrowserInfo()
                );
            })(),
            passWord: tmpArgs.pwd,
            leaveUrl: abp.appPath + "MeetingManager/Index",
            role: parseInt(tmpArgs.role, 10),
            userEmail: (function () {
                try {
                    return testTool.b64DecodeUnicode(tmpArgs.email);
                } catch (e) {
                    return tmpArgs.email;
                }
            })(),
            lang: "en-US",
            signature: tmpArgs.signature || "",
            china: false,
        };

        // a tool use debug mobile device
        if (testTool.isMobileDevice()) {
            vConsole = new VConsole();
        }
        console.log(JSON.stringify(ZoomMtg.checkSystemRequirements()));

        // it's option if you want to change the WebSDK dependency link resources. setZoomJSLib must be run at first
        // ZoomMtg.setZoomJSLib("https://source.zoom.us/1.8.1/lib", "/av"); // CDN version defaul
        if (meetingConfig.china)
            ZoomMtg.setZoomJSLib("https://jssdk.zoomus.cn/1.8.1/lib", "/av"); // china cdn option
        ZoomMtg.preLoadWasm();
        ZoomMtg.prepareJssdk();
        function beginJoin(signature) {
            ZoomMtg.init({
                leaveUrl: meetingConfig.leaveUrl,
                webEndpoint: meetingConfig.webEndpoint,
                success: function () {
                    console.log(meetingConfig);
                    console.log("signature", signature);
                    $.i18n.reload("en-US");
                    ZoomMtg.join({
                        meetingNumber: meetingConfig.meetingNumber,
                        userName: meetingConfig.userName,
                        signature: signature,
                        apiKey: meetingConfig.apiKey,
                        userEmail: "",
                        passWord: meetingConfig.passWord,
                        success: function (res) {
                            console.log("join meeting success");
                            console.log("get attendeelist");
                            $('#zmmtg-root').css('display', 'block');
                            $('#zmmtg-root').css('z-index', '999');
                            ZoomMtg.getAttendeeslist({});
                            ZoomMtg.getCurrentUser({
                                success: function (res) {
                                    console.log("success getCurrentUser", res.result.currentUser);
                                },
                            });
                        },
                        error: function (res) {
                            console.log(res);
                        },
                    });
                },
                error: function (res) {
                    console.log(res);
                },
            });

            ZoomMtg.inMeetingServiceListener('onUserJoin', function (data) {
                console.log('inMeetingServiceListener onUserJoin', data);
            });

            ZoomMtg.inMeetingServiceListener('onUserLeave', function (data) {
                console.log('inMeetingServiceListener onUserLeave', data);

                debugger;

                var meetingId = $('#meetingId').val();
                var userJoinMeetingId = $('#userJoinMeetingId').val();

                abp.ajax({
                    url: abp.appPath + 'MeetingManager/LeaveMeeting?meetingId=' + meetingId + '&&userJoinMeetingId=' + userJoinMeetingId,
                    type: 'POST',
                    dataType: 'html',
                    success: function (content) {
                    },
                    error: function (e) {
                        alert(e.message);
                    }
                });
            });

            ZoomMtg.inMeetingServiceListener('onUserIsInWaitingRoom', function (data) {
                console.log('inMeetingServiceListener onUserIsInWaitingRoom', data);
            });

            ZoomMtg.inMeetingServiceListener('onMeetingStatus', function (data) {
                console.log('inMeetingServiceListener onMeetingStatus', data);
            });
        }

        beginJoin(meetingConfig.signature);       
    })();

</script>
